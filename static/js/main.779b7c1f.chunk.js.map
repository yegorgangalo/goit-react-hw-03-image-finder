{"version":3,"sources":["components/ImageGallery/ImageGallery.module.css","components/SearchBar/SearchBar.js","APIservice/APIservice.js","components/Modal/Modal.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGalleryList/ImageGalleryList.js","components/Button/Button.js","components/ImageGallery/ImageGallery.js","App.jsx","index.js","components/Button/Button.module.css"],"names":["module","exports","SearchBar","state","searchQuery","handleInputChange","target","setState","value","onSubmitForm","event","preventDefault","trim","props","onSubmit","toast","warn","reset","this","className","type","autoComplete","autoFocus","placeholder","onChange","PureComponent","staticURL","perPage","keyAPI","imageAPI","query","page","url","fetch","then","res","ok","json","Promise","reject","Error","modalRoot","document","querySelector","Modal","keydownCloseModal","code","onClose","backdropCloseModal","currentTarget","window","addEventListener","removeEventListener","src","alt","createPortal","onClick","ImageGalleryItem","showModal","toggleModal","fullSize","ImageGalleryList","imgArray","map","id","webformatURL","largeImageURL","tags","Button","onClickFetch","s","button","size","iconSpin","iconSpinBtn","IDLE","PENDING","REJECTED","RESOLVED","defaultState","status","imgFetched","imgTotal","error","ImageGallery","fetchQuery","setTimeout","hits","totalHits","length","prevState","incrementPage","catch","resetGallery","callback","buttonLoadType","btnType","prevProps","scrollTo","top","documentElement","scrollHeight","behavior","buttonType","info","message","App","setSearchQuery","autoClose","Component","root","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.779b7c1f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ImageGallery_info__MGNMe\"};","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\n\nclass SearchBar extends PureComponent {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  }\n\n    state = {\n      searchQuery:'',\n    }\n\n  handleInputChange = ({ target }) => {\n      this.setState({\n        searchQuery: target.value\n      })\n  }\n\n  onSubmitForm = (event) => {\n    event.preventDefault();\n    const { searchQuery } = this.state;\n    searchQuery.trim() !== '' ? this.props.onSubmit(searchQuery) : toast.warn('Input search Query');\n    this.reset();\n  }\n\n  reset = () => this.setState({ searchQuery: '' })\n\n    render() {\n      const { searchQuery } = this.state;\n        return (\n            <header className=\"Searchbar\">\n              <form className=\"SearchForm\" onSubmit={this.onSubmitForm}>\n                <button type=\"submit\" className=\"SearchForm-button\">\n                  <span className=\"SearchForm-button-label\">Search</span>\n                </button>\n\n                <input\n                  className=\"SearchForm-input\"\n                  type=\"text\"\n                  autoComplete=\"off\"\n                  autoFocus\n                  placeholder=\"Search images and photos\"\n                  value={searchQuery}\n                  onChange={this.handleInputChange}\n                />\n              </form>\n            </header>\n        )\n    }\n}\n\nexport default SearchBar;","const staticFetchOptions = {\n    perPage: 12,\n    staticURL: 'https://pixabay.com/api/?image_type=photo&orientation=horizontal',\n    keyAPI: '19532775-cd1fec64673db4c80a00103d2',\n}\n\nconst { staticURL, perPage, keyAPI } = staticFetchOptions;\n\nexport function imageAPI (query, page) {\n    const url = `${staticURL}&q=${query}&page=${page}&per_page=${perPage}&key=${keyAPI}`;\n    return fetch(url)\n        .then(res => {\n            if (!res.ok) {\n                return Promise.reject(new Error(`There is no image with tag ${query}`));\n            }\n            return res.json();\n        })\n}","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nclass Modal extends PureComponent {\n    static propTypes = {\n        onClose: PropTypes.func.isRequired,\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown', this.keydownCloseModal);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.keydownCloseModal);\n    }\n\n    keydownCloseModal = ({ code }) => {\n        code === \"Escape\" && this.props.onClose();\n    }\n\n    backdropCloseModal = ({ target, currentTarget }) => {\n        // target === currentTarget && this.props.onClose();\n        this.props.onClose()\n    }\n\n    render() {\n        const { src, alt } = this.props;\n        return createPortal(\n            <div className=\"Overlay\" onClick={this.backdropCloseModal}>\n              <div className=\"Modal\">\n                <img src={src} alt={alt} />\n              </div>\n            </div>\n        , modalRoot)\n    }\n}\n\nexport default Modal;","import React, {PureComponent} from 'react';\nimport Modal from '../Modal'\n\nclass ImageGalleryItem extends PureComponent {\n    state = {\n        showModal: false,\n    }\n\n    toggleModal = () => {\n      this.setState(({ showModal }) => ({\n        showModal: !showModal,\n      }))\n    }\n\n    render() {\n        const { showModal } = this.state;\n        const { src, alt, fullSize } = this.props;\n        return (\n            <>\n            <img src={src} alt={alt} onClick={this.toggleModal} className=\"ImageGalleryItem-image\" />\n            {showModal && ( <Modal onClose={this.toggleModal} src={fullSize} alt={alt} /> )}\n            </>\n        )\n    }\n}\n\nexport default ImageGalleryItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageGalleryItem from '../ImageGalleryItem'\n\nfunction ImageGalleryList ({imgArray}) {\n    return (\n        <ul className=\"ImageGallery\">\n            {imgArray.map(({ id, webformatURL, largeImageURL, tags }) => {\n                return (\n                    <li className=\"ImageGalleryItem\" key={id+webformatURL}>\n                        <ImageGalleryItem src={webformatURL} alt={tags} fullSize={largeImageURL} />\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}\n\nImageGalleryList.propTypes = {\n    imgArray: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        webformatURL: PropTypes.string.isRequired,\n        largeImageURL: PropTypes.string.isRequired,\n        tags: PropTypes.string.isRequired,\n    }))\n}\n\nexport default ImageGalleryList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ImSpinner6 } from 'react-icons/im';\nimport s from './Button.module.css';\n\nfunction Button({ onClickFetch = null, type = 'more'}) {\n    if (type === 'hidden') {return <></>}\n    if (type === 'more') {\n        return <button className={s.button} type=\"button\" onClick={onClickFetch}>Load More</button>;\n    }\n    if (type === 'spinner') {\n        return <ImSpinner6 size=\"36\" className={s.iconSpin} />;\n    }\n    if (type === 'loading') {\n        return (\n            <button className={s.button} type=\"button\">\n                <span>\n                    <ImSpinner6 size=\"16\" className={s.iconSpinBtn} />\n                </span>\n                <span>Loading...</span>\n            </button>)\n    }\n}\n\nButton.propTypes = {\n    onClickFetch: PropTypes.func,\n    type: PropTypes.string,\n}\n\nexport default Button;","import React, { PureComponent } from 'react';\nimport { imageAPI } from '../../APIservice';\nimport s from './ImageGallery.module.css';\nimport ImageGalleryList from '../ImageGalleryList';\nimport Button from '../Button';\nimport PropTypes from 'prop-types';\n\nconst status = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    REJECTED: 'rejected',\n    RESOLVED: 'resolved',\n}\nconst { IDLE, PENDING, REJECTED, RESOLVED } = status;\n\nconst defaultState = {\n        status: IDLE,\n        imgFetched: [],\n        imgTotal: 0,\n        page: 1,\n        error: '',\n    }\n\nclass ImageGallery extends PureComponent {\n    static propTypes = {\n        searchQuery: PropTypes.string.isRequired,\n    }\n\n    state = { ...defaultState }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.searchQuery !== this.props.searchQuery) {\n            this.resetGallery(this.fetchQuery);\n        }\n        if (prevState.imgFetched !== this.state.imgFetched) {\n            window.scrollTo({\n              top: document.documentElement.scrollHeight,\n              behavior: 'smooth',\n            });\n        }\n    }\n\n    fetchQuery = () => {\n        this.setState({ status: PENDING });\n        const { searchQuery } = this.props;\n        const { page, imgFetched } = this.state;\n\n    return setTimeout(() => {\n        imageAPI(searchQuery, page)\n          .then(({ hits, totalHits }) => {\n            if (hits.length===0 && imgFetched.length===0) {\n                  return Promise.reject(new Error(`There is no image with tag: ${searchQuery}`));\n              }\n            this.setState((prevState) => ({\n                imgFetched: [...prevState.imgFetched, ...hits],\n                imgTotal: totalHits,\n                status: RESOLVED,\n            }));\n            this.incrementPage();\n          })\n          .catch(error => this.setState({ error, status: REJECTED }))\n          }, 500)\n    }\n\n    incrementPage = () => this.setState((prevState) => ({ page: prevState.page +1 }));\n\n    resetGallery = (callback = null) => this.setState({ ...defaultState }, callback);\n\n    buttonLoadType = () => {\n        const { imgFetched, page, totalHits, status } = this.state;\n        let btnType = 'more';\n        if(page === 1) {btnType = 'spinner'};\n        if (status === PENDING && page>1) { btnType = 'loading' };\n        if (imgFetched.length >= totalHits) { btnType = 'hidden' };\n        return btnType;\n    }\n\n    render() {\n        const { imgFetched, error, status } = this.state;\n        const buttonType = this.buttonLoadType();\n\n        if (status === IDLE) {\n            return <h1 className={s.info}>Input tag to find images</h1>\n        }\n        if (status === PENDING) {\n            return (\n                <>\n                <ImageGalleryList imgArray={imgFetched}/>\n                <Button type={buttonType}/>\n                </>\n            )\n        }\n        if (status === REJECTED) {\n            return <h1 className={s.info}>{error.message}</h1>\n        }\n        if (status === RESOLVED) {\n            return (\n                <>\n                <ImageGalleryList imgArray={imgFetched}/>\n                <Button type={buttonType} onClickFetch={this.fetchQuery} />\n                </>\n            )\n        }\n    }\n}\n\nexport default ImageGallery;","import React, { Component } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SearchBar from './components/SearchBar';\nimport ImageGallery from './components/ImageGallery';\n\nclass App extends Component {\n    state = {\n      searchQuery: '',\n    }\n\n    setSearchQuery = (searchQuery) => {\n      this.setState({ searchQuery });\n    }\n\n    render() {\n      const { searchQuery } = this.state;\n      return (<>\n        <SearchBar onSubmit={this.setSearchQuery} />\n        <ImageGallery searchQuery={searchQuery} />\n        <ToastContainer autoClose={3000}/>\n        </>)\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nconst root = document.querySelector('#root');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  root,\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\",\"iconSpin\":\"Button_iconSpin__3vRRA\",\"icon-spin\":\"Button_icon-spin__18vUR\",\"iconSpinBtn\":\"Button_iconSpinBtn__3d432\"};"],"sourceRoot":""}