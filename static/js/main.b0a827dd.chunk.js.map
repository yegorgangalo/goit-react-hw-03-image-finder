{"version":3,"sources":["components/ImageGallery/ImageGallery.module.css","components/SearchBar/SearchBar.js","components/Modal/Modal.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGalleryList/ImageGalleryList.js","components/Button/Button.js","components/ImageGallery/ImageGallery.js","App.jsx","index.js","components/Button/Button.module.css"],"names":["module","exports","SearchBar","state","searchQuery","handleInputChange","target","setState","value","onSubmitForm","event","preventDefault","trim","props","onSubmit","toast","warn","reset","this","className","type","autoComplete","autoFocus","placeholder","onChange","PureComponent","modalRoot","document","querySelector","Modal","keydownCloseModal","code","onClose","backdropCloseModal","currentTarget","window","addEventListener","removeEventListener","src","alt","createPortal","onClick","ImageGalleryItem","showModal","toggleModal","fullSize","ImageGalleryList","imgArray","map","id","webformatURL","largeImageURL","tags","Button","onClickFetch","s","button","size","iconSpin","iconSpinBtn","keyAPI","IDLE","PENDING","REJECTED","RESOLVED","defaultState","status","imgFetched","imgTotal","page","error","ImageGallery","staticFetchOptions","perPage","staticURL","fetchQuery","url","setTimeout","fetch","then","res","ok","json","Promise","reject","Error","hits","totalHits","length","prevState","incrementPage","catch","resetGallery","callback","buttonLoadType","btnType","prevProps","scrollTo","top","documentElement","scrollHeight","behavior","buttonType","info","message","App","setSearchQuery","autoClose","Component","root","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b0a827dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ImageGallery_info__MGNMe\"};","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\n\nclass SearchBar extends PureComponent {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  }\n\n    state = {\n      searchQuery:'',\n    }\n\n  handleInputChange = ({ target }) => {\n      this.setState({\n        searchQuery: target.value\n      })\n  }\n\n  onSubmitForm = (event) => {\n    event.preventDefault();\n    const { searchQuery } = this.state;\n    searchQuery.trim() !== '' ? this.props.onSubmit(searchQuery) : toast.warn('Input search Query');\n    this.reset();\n  }\n\n  reset = () => this.setState({ searchQuery: '' })\n\n    render() {\n      const { searchQuery } = this.state;\n        return (\n            <header className=\"Searchbar\">\n              <form className=\"SearchForm\" onSubmit={this.onSubmitForm}>\n                <button type=\"submit\" className=\"SearchForm-button\">\n                  <span className=\"SearchForm-button-label\">Search</span>\n                </button>\n\n                <input\n                  className=\"SearchForm-input\"\n                  type=\"text\"\n                  autoComplete=\"off\"\n                  autoFocus\n                  placeholder=\"Search images and photos\"\n                  value={searchQuery}\n                  onChange={this.handleInputChange}\n                />\n              </form>\n            </header>\n        )\n    }\n}\n\nexport default SearchBar;","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nclass Modal extends PureComponent {\n    static propTypes = {\n        onClose: PropTypes.func.isRequired,\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown', this.keydownCloseModal);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.keydownCloseModal);\n    }\n\n    keydownCloseModal = ({ code }) => {\n        code === \"Escape\" && this.props.onClose();\n    }\n\n    backdropCloseModal = ({ target, currentTarget }) => {\n        // target === currentTarget && this.props.onClose();\n        this.props.onClose()\n    }\n\n    render() {\n        const { src, alt } = this.props;\n        return createPortal(\n            <div className=\"Overlay\" onClick={this.backdropCloseModal}>\n              <div className=\"Modal\">\n                <img src={src} alt={alt} />\n              </div>\n            </div>\n        , modalRoot)\n    }\n}\n\nexport default Modal;","import React, {PureComponent} from 'react';\nimport Modal from '../Modal'\n\nclass ImageGalleryItem extends PureComponent {\n    state = {\n        showModal: false,\n    }\n\n    toggleModal = () => {\n      this.setState(({ showModal }) => ({\n        showModal: !showModal,\n      }))\n    }\n\n    render() {\n        const { showModal } = this.state;\n        const { src, alt, fullSize } = this.props;\n        return (\n            <>\n            <img src={src} alt={alt} onClick={this.toggleModal} className=\"ImageGalleryItem-image\" />\n            {showModal && ( <Modal onClose={this.toggleModal} src={fullSize} alt={alt} /> )}\n            </>\n        )\n    }\n}\n\nexport default ImageGalleryItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageGalleryItem from '../ImageGalleryItem'\n\nfunction ImageGalleryList ({imgArray}) {\n    return (\n        <ul className=\"ImageGallery\">\n            {imgArray.map(({ id, webformatURL, largeImageURL, tags }) => {\n                return (\n                    <li className=\"ImageGalleryItem\" key={id+webformatURL}>\n                        <ImageGalleryItem src={webformatURL} alt={tags} fullSize={largeImageURL} />\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}\n\nImageGalleryList.propTypes = {\n    imgArray: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        webformatURL: PropTypes.string.isRequired,\n        largeImageURL: PropTypes.string.isRequired,\n        tags: PropTypes.string.isRequired,\n    }))\n}\n\nexport default ImageGalleryList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ImSpinner6 } from 'react-icons/im';\nimport s from './Button.module.css';\n\nfunction Button({ onClickFetch = null, type = 'more'}) {\n    if (type === 'hidden') {return <></>}\n    if (type === 'more') {\n        return <button className={s.button} type=\"button\" onClick={onClickFetch}>Load More</button>;\n    }\n    if (type === 'spinner') {\n        return <ImSpinner6 size=\"36\" className={s.iconSpin} />;\n    }\n    if (type === 'loading') {\n        return (\n            <button className={s.button} type=\"button\">\n                <span>\n                    <ImSpinner6 size=\"16\" className={s.iconSpinBtn} />\n                </span>\n                <span>Loading...</span>\n            </button>)\n    }\n}\n\nButton.propTypes = {\n    onClickFetch: PropTypes.func,\n    type: PropTypes.string,\n}\n\nexport default Button;","import React, { PureComponent } from 'react';\nimport s from './ImageGallery.module.css';\nimport ImageGalleryList from '../ImageGalleryList';\nimport Button from '../Button';\nimport PropTypes from 'prop-types';\n\nconst keyAPI = '19532775-cd1fec64673db4c80a00103d2';\nconst status = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    REJECTED: 'rejected',\n    RESOLVED: 'resolved',\n}\nconst { IDLE, PENDING, REJECTED, RESOLVED } = status;\nconst defaultState = {\n        status: IDLE,\n        imgFetched: [],\n        imgTotal: 0,\n        page: 1,\n        error: '',\n    }\n\nclass ImageGallery extends PureComponent {\n    static propTypes = {\n        searchQuery: PropTypes.string.isRequired,\n    }\n\n    state = { ...defaultState }\n\n    staticFetchOptions = {\n        perPage: 12,\n        staticURL: 'https://pixabay.com/api/?image_type=photo&orientation=horizontal',\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.searchQuery !== this.props.searchQuery) {\n            this.resetGallery(this.fetchQuery);\n        }\n        if (prevState.imgFetched !== this.state.imgFetched) {\n            window.scrollTo({\n              top: document.documentElement.scrollHeight,\n              behavior: 'smooth',\n            });\n        }\n    }\n\n    fetchQuery = () => {\n        this.setState({ status: PENDING });\n        const { searchQuery } = this.props;\n        const { page, imgFetched } = this.state;\n        const { staticURL, perPage } = this.staticFetchOptions;\n        const url = `${staticURL}&q=${searchQuery}&page=${page}&per_page=${perPage}&key=${keyAPI}`;\n\n    return setTimeout(() => {\n      fetch(url)\n      .then(res => {\n          if (!res.ok) {\n              return Promise.reject(new Error(`There is no image with tag ${searchQuery}`));\n          }\n          return res.json();\n      })\n          .then(({ hits, totalHits }) => {\n        if (hits.length===0 && imgFetched.length===0) {\n              return Promise.reject(new Error(`There is no image with tag: ${searchQuery}`));\n          }\n        this.setState((prevState) => ({\n            imgFetched: [...prevState.imgFetched, ...hits],\n            imgTotal: totalHits,\n            status: RESOLVED,\n        }));\n        this.incrementPage();\n      }\n      )\n      .catch(error => this.setState({ error, status: REJECTED }))\n      }, 500)\n    }\n\n    incrementPage = () => this.setState((prevState) => ({ page: prevState.page +1 }));\n\n    resetGallery = (callback = null) => this.setState({ ...defaultState }, callback);\n\n    buttonLoadType = () => {\n        const { imgFetched, page, totalHits, status } = this.state;\n        let btnType = 'more';\n        if(page === 1) {btnType = 'spinner'};\n        if (status === PENDING && page>1) { btnType = 'loading' };\n        if (imgFetched.length >= totalHits) { btnType = 'hidden' };\n        return btnType;\n    }\n\n    render() {\n        const { imgFetched, error, status } = this.state;\n        const buttonType = this.buttonLoadType();\n\n        if (status === IDLE) {\n            return <h1 className={s.info}>Input tag to find images</h1>\n        }\n        if (status === PENDING) {\n            return (\n                <>\n                <ImageGalleryList imgArray={imgFetched}/>\n                <Button type={buttonType}/>\n                </>\n            )\n        }\n        if (status === REJECTED) {\n            return <h1 className={s.info}>{error.message}</h1>\n        }\n        if (status === RESOLVED) {\n            return (\n                <>\n                <ImageGalleryList imgArray={imgFetched}/>\n                <Button type={buttonType} onClickFetch={this.fetchQuery} />\n                </>\n            )\n        }\n    }\n}\n\nexport default ImageGallery;","import React, { Component } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SearchBar from './components/SearchBar';\nimport ImageGallery from './components/ImageGallery';\n\nclass App extends Component {\n    state = {\n      searchQuery: '',\n    }\n\n    setSearchQuery = (searchQuery) => {\n      this.setState({ searchQuery });\n    }\n\n    render() {\n      const { searchQuery } = this.state;\n      return (<>\n        <SearchBar onSubmit={this.setSearchQuery} />\n        <ImageGallery searchQuery={searchQuery} />\n        <ToastContainer autoClose={3000}/>\n        </>)\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nconst root = document.querySelector('#root');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  root,\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\",\"iconSpin\":\"Button_iconSpin__3vRRA\",\"icon-spin\":\"Button_icon-spin__18vUR\",\"iconSpinBtn\":\"Button_iconSpinBtn__3d432\"};"],"sourceRoot":""}